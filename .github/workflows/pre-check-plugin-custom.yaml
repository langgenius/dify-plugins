name: Pre Check Plugin (Push)

on:
  push:
    branches:
      - main
      - dev

env:
  REPO_NAME: kenneth-bro/dify-plugins
  MARKETPLACE_BASE_URL: https://marketplace.dify.ai
  MARKETPLACE_TOKEN: placeholder
  GH_TOKEN: ${{ github.token }}

jobs:
  pre-check-plugin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0  # 需要完整历史用于计算 diff

      - name: Clone Marketplace Toolkit
        run: |
          gh repo clone langgenius/dify-marketplace-toolkit -- .scripts/

      - name: Download Plugin Daemon
        run: |
          gh release download -R langgenius/dify-plugin-daemon --pattern "dify-plugin-linux-amd64" --dir .scripts
          chmod +x .scripts/dify-plugin-linux-amd64

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.7

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.44.5

      - name: Get Changed .difypkg File
        id: changed-pkg
        shell: bash
        run: |
          set -e
          BEFORE=${{ github.event.before }}
          # 处理首次 push/无效 before 的情况
          if ! git cat-file -e "$BEFORE^{commit}" 2>/dev/null; then
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              BEFORE=$(git rev-parse HEAD~1)
            else
              BEFORE=""
            fi
          fi

          if [ -n "$BEFORE" ]; then
            FILES=$(git diff --name-only "$BEFORE" ${{ github.sha }} || true)
          else
            # 初始提交时回退到列出当前跟踪文件
            FILES=$(git ls-files || true)
          fi

          echo "Changed files:" && echo "$FILES"
          CHANGED_PKG=$(echo "$FILES" | grep -E "\.difypkg$" || true)

          if [ -z "$CHANGED_PKG" ]; then
            echo "PLUGIN_PATH=" >> $GITHUB_ENV
            echo "has_pkg=false" >> $GITHUB_OUTPUT
            echo "No .difypkg file changed in this push. Skipping pre-check."
            exit 0
          fi

          PKG_COUNT=$(echo "$CHANGED_PKG" | wc -l | tr -d ' ')
          if [ "$PKG_COUNT" -ne 1 ]; then
            echo "Only one .difypkg file change is allowed per push."
            echo "$CHANGED_PKG"
            exit 1
          fi

          PLUGIN_PATH=$(echo "$CHANGED_PKG" | head -n 1)
          echo "PLUGIN_PATH=$PLUGIN_PATH" >> $GITHUB_ENV
          echo "has_pkg=true" >> $GITHUB_OUTPUT
          echo "plugin_path=$PLUGIN_PATH" >> $GITHUB_OUTPUT

      - name: Unpack File
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          set -e
          PKG="${{ steps.changed-pkg.outputs.plugin_path }}"
          mv "$PKG" "$PKG.zip"
          mkdir -p unpacked_plugin
          unzip -o "$PKG.zip" -d unpacked_plugin
          echo "PLUGIN_PATH=unpacked_plugin" >> $GITHUB_ENV

      - name: Check Plugin Manifest
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          # manifest.yaml author must not be langgenius or dify
          if yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml | grep -q "langgenius"; then
            echo "!!! Plugin manifest.yaml author must not be 'langgenius'"
            exit 1
          fi
          if yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml | grep -q "dify"; then
            echo "!!! Plugin manifest.yaml author must not be 'dify'"
            exit 1
          fi

      - name: Check Plugin Icon
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          # Get icon filename from manifest.yaml
          PLUGIN_ICON_FILENAME=$(yq '.icon' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          echo "PLUGIN_ICON_FILENAME=$PLUGIN_ICON_FILENAME" >> $GITHUB_ENV
          # Check if icon file exists
          if [ ! -f "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME" ]; then
            echo "!!! Plugin icon file not found: _assets/$PLUGIN_ICON_FILENAME"
            exit 1
          fi
          # Check if icon contains template placeholder text
          if grep -q "DIFY_MARKETPLACE_TEMPLATE_ICON_DO_NOT_USE" "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME"; then
            echo "!!! Plugin icon contains template placeholder text 'DIFY_MARKETPLACE_TEMPLATE_ICON_DO_NOT_USE', change default icon before submitting to marketplace."
            exit 1
          fi
          # Define default icon content
          DEFAULT_ICON='<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 20 V80 M20 20 H60 Q80 20 80 40 T60 60 H20" 
                  fill="none" 
                  stroke="black" 
                  stroke-width="5"/>
          </svg>'
          # Check if icon content matches default icon (normalize whitespace)
          ICON_CONTENT=$(cat "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME" | tr -d '\n\r\t ' | tr -s ' ')
          DEFAULT_ICON_NORMALIZED=$(echo "$DEFAULT_ICON" | tr -d '\n\r\t ' | tr -s ' ')
          if [ "$ICON_CONTENT" = "$DEFAULT_ICON_NORMALIZED" ]; then
            echo "!!! Plugin icon is using the default template icon and must be customized"
            exit 1
          fi

      - name: Check If Version Exists
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          # get version, author, name
          VERSION=$(yq '.version' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          AUTHOR=$(yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          NAME=$(yq '.name' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          echo "Checking plugin version: $VERSION"
          # Check if the version already exists
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.MARKETPLACE_BASE_URL }}/api/v1/plugins/$AUTHOR/$NAME/$VERSION")
          if [ "$RESPONSE_CODE" = "200" ]; then
            RESPONSE=$(curl -s "${{ env.MARKETPLACE_BASE_URL }}/api/v1/plugins/$AUTHOR/$NAME/$VERSION")
            if [ "$(echo "$RESPONSE" | jq -r '.code')" = "0" ]; then
              echo "!!! Plugin version $VERSION already exists, please update the version number in manifest.yaml"
              exit 1
            fi
          fi

      - name: Check Plugin Deps
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          if [ -f ${{ env.PLUGIN_PATH }}/requirements.txt ]; then
            echo "Trying to install plugin dependencies..."
            python3 -m venv .venv
            source .venv/bin/activate
            python3 -m pip install -r ${{ env.PLUGIN_PATH }}/requirements.txt
            deactivate
          fi

      - name: Check Plugin Install
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          if [ -f ${{ env.PLUGIN_PATH }}/requirements.txt ]; then
              set -e
              source .venv/bin/activate
              pip install packaging
              dify_version=$(pip list | awk '$1=="dify_plugin"{print $2}')
              target_version="0.0.1b64"
              if [ -z "$dify_version" ]; then
                result=1
              else
                result=$(python -c "from packaging.version import Version; print(0 if Version('$dify_version') > Version('$target_version') else 1)")
              fi
              if [ $result == 0 ]; then
                  export INSTALL_METHOD=serverless
                  export SERVERLESS_PORT=8080
                  export SERVERLESS_HOST=0.0.0.0
              else
                  export INSTALL_METHOD=aws_lambda
                  export AWS_LAMBDA_PORT=8080
                  export AWS_LAMBDA_HOST=0.0.0.0
              fi
              python3 .scripts/validator/test-plugin-install.py -d ${{ env.PLUGIN_PATH }}
          fi

      - name: Check Packaging
        if: steps.changed-pkg.outputs.has_pkg == 'true'
        run: |
          python3 .scripts/uploader/upload-package.py -d ${{ env.PLUGIN_PATH }} -t ${{ env.MARKETPLACE_TOKEN }} --plugin-daemon-path .scripts/dify-plugin-linux-amd64 -u ${{ env.MARKETPLACE_BASE_URL }} -f --test