name: Pre Check Plugin

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, review_requested, edited]
    branches: 
      - main
      - dev
    paths-ignore:
      - ".github/**"
      - ".gitignore"
      - "unpacked_plugin/**"
      - "README.md"
      - "LICENSE"

env:
  REPO_NAME: langgenius/dify-plugins
  MARKETPLACE_BASE_URL: https://marketplace.dify.ai
  MARKETPLACE_TOKEN: placeholder
  GH_TOKEN: ${{ github.token }}

jobs:
  pre-check-plugin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Clone Marketplace Toolkit
        run: |
          gh repo clone langgenius/dify-marketplace-toolkit -- .scripts/
      
      - name: Download Plugin Daemon
        run: |
          gh release download -R langgenius/dify-plugin-daemon --pattern "dify-plugin-linux-amd64" --dir .scripts
          chmod +x .scripts/dify-plugin-linux-amd64

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.7
      
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.44.5

      - name: Get PR Path
        run: |
          export PR_FILES=$(gh pr view -R ${{ env.REPO_NAME }} ${{ github.event.pull_request.number }} --json files --jq .files)

          if PLUGIN_PATH=$(python3 .scripts/validator/check-pkg-paths.py); then
              echo $PLUGIN_PATH
              echo "PLUGIN_PATH=$PLUGIN_PATH" >> $GITHUB_ENV
          else
            echo "Only one .difypkg file change is allowed in a single PR."
            exit 1
          fi

      - name: Unpack File
        run: |
          mv ${{ env.PLUGIN_PATH }} ${{ env.PLUGIN_PATH }}.zip
          mkdir -p unpacked_plugin
          unzip ${{ env.PLUGIN_PATH }}.zip -d unpacked_plugin
          echo "PLUGIN_PATH=unpacked_plugin" >> $GITHUB_ENV

      - name: Check Plugin Manifest
        run: |
          # manifest.yaml author must not be langgenius or dify
          if yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml | grep -q "langgenius"; then
            echo "!!! Plugin manifest.yaml author must not be 'langgenius'"
            exit 1
          fi
          if yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml | grep -q "dify"; then
            echo "!!! Plugin manifest.yaml author must not be 'dify'"
            exit 1
          fi

      - name: Check Plugin Icon
        run: |
          # Get icon filename from manifest.yaml
          PLUGIN_ICON_FILENAME=$(yq '.icon' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          echo "PLUGIN_ICON_FILENAME=$PLUGIN_ICON_FILENAME" >> $GITHUB_ENV
          
          # Check if icon file exists
          if [ ! -f "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME" ]; then
            echo "!!! Plugin icon file not found: _assets/$PLUGIN_ICON_FILENAME"
            exit 1
          fi
          
          # Check if icon contains template placeholder text
          if grep -q "DIFY_MARKETPLACE_TEMPLATE_ICON_DO_NOT_USE" "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME"; then
            echo "!!! Plugin icon contains template placeholder text 'DIFY_MARKETPLACE_TEMPLATE_ICON_DO_NOT_USE', change default icon before submitting to marketplace."
            exit 1
          fi
          
          # Define default icon content
          DEFAULT_ICON='<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
            <path d="M20 20 V80 M20 20 H60 Q80 20 80 40 T60 60 H20" 
                  fill="none" 
                  stroke="black" 
                  stroke-width="5"/>
          </svg>'
          
          # Check if icon content matches default icon (normalize whitespace)
          ICON_CONTENT=$(cat "${{ env.PLUGIN_PATH }}/_assets/$PLUGIN_ICON_FILENAME" | tr -d '\n\r\t ' | tr -s ' ')
          DEFAULT_ICON_NORMALIZED=$(echo "$DEFA_assetsULT_ICON" | tr -d '\n\r\t ' | tr -s ' ')
          
          if [ "$ICON_CONTENT" = "$DEFAULT_ICON_NORMALIZED" ]; then
            echo "!!! Plugin icon is using the default template icon and must be customized"
            exit 1
          fi
  

      - name: Check If Version Exists
        run: |
          # get version, author, name
          VERSION=$(yq '.version' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          AUTHOR=$(yq '.author' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          NAME=$(yq '.name' ${{ env.PLUGIN_PATH }}/manifest.yaml)
          echo "Checking plugin version: $VERSION"

          # Check if the version already exists
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.MARKETPLACE_BASE_URL }}/api/v1/plugins/$AUTHOR/$NAME/$VERSION")
          
          if [ "$RESPONSE_CODE" = "200" ]; then
            RESPONSE=$(curl -s "${{ env.MARKETPLACE_BASE_URL }}/api/v1/plugins/$AUTHOR/$NAME/$VERSION")
            if [ "$(echo "$RESPONSE" | jq -r '.code')" = "0" ]; then
              echo "!!! Plugin version $VERSION already exists, please update the version number in manifest.yaml"
              exit 1
            fi
          fi

      - name: Check Plugin Deps
        run: |
          if [ -f ${{ env.PLUGIN_PATH }}/requirements.txt ]; then
            echo "Trying to install plugin dependencies..."
            python3 -m venv .venv
            source .venv/bin/activate
            python3 -m pip install -r ${{ env.PLUGIN_PATH }}/requirements.txt
            deactivate
          fi

      - name: Check Plugin Install
        run: |
          if [ -f ${{ env.PLUGIN_PATH }}/requirements.txt ]; then
              source .venv/bin/activate
              pip install packaging
              dify_version=$(pip list | grep 'dify_plugin' | awk '{print $2}')
              target_version="0.0.1b64"
              result=$(python -c "from packaging.version import Version; print(0 if Version('$dify_version') > Version('$target_version') else 1)")
              if [ $result == 0 ]; then
                  export INSTALL_METHOD=serverless
                  export SERVERLESS_PORT=8080
                  export SERVERLESS_HOST=0.0.0.0
              else
                  export INSTALL_METHOD=aws_lambda
                  export AWS_LAMBDA_PORT=8080
                  export AWS_LAMBDA_HOST=0.0.0.0
              fi
              python3 .scripts/validator/test-plugin-install.py -d ${{ env.PLUGIN_PATH }}
          fi

      - name: Check Packaging
        run: |
          python3 .scripts/uploader/upload-package.py -d ${{ env.PLUGIN_PATH }} -t ${{ env.MARKETPLACE_TOKEN }} --plugin-daemon-path .scripts/dify-plugin-linux-amd64 -u ${{ env.MARKETPLACE_BASE_URL }} -f --test
